{
  "name": "ImageStore",
  "tagline": "High Performance Image Storage written in PHP",
  "body": "\r\n[![Latest Stable Version](https://poser.pugx.org/rostenkowski/imagestore/v/stable)](https://github.com/rostenkowski/imagestore/releases)\r\n[![Build Status](https://travis-ci.org/rostenkowski/imagestore.svg?branch=master)](https://travis-ci.org/rostenkowski/imagestore)\r\n[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/rostenkowski/imagestore/blob/master/LICENSE)\r\n\r\n\r\n## Installation\r\n\r\nDownload the latest [package](https://github.com/rostenkowski/imagestore/releases)\r\nor use [**Composer**](https://getcomposer.org/doc/00-intro.md#globally):\r\n\r\n```bash\r\ncomposer require rostenkowski/imagestore\r\n```\r\n\r\n## Requirements\r\n- PHP 5.6+\r\n- Nette Framework 2.3+ \r\n\r\n**Notice:** Library should be also compatible with Nette Framework version 2.2 and 2.4-dev but currently is tested against stable 2.3 branch.\r\n\r\nFor the full list of dependencies see the [`composer.json`](composer.json) file.\r\n\r\n## API\r\n\r\nThe API documentation is located in the `docs/api` directory.\r\n\r\n## Technical overview\r\n- The images are stored in regular files in the given directory.\r\n- The files are organized in 2-level directory structure with maximum of 256Â² directories.\r\n- The directory tree is well balanced thanks to image hashes used for the directory path creation.\r\n- The storage stores only one file even if the same image is stored multiple times.\r\n- The image thumbnails are created on demand and cached in the cache directory.\r\n\r\n## Tests\r\n\r\nThe source code of the library is fully covered by [**Nette Tester**](https://tester.nette.org/) tests.\r\n\r\nTo run the **ImageStore** tests simply install the dependencies\r\nusing [**Composer**](https://getcomposer.org/doc/00-intro.md#globally) and then run the [`bin/run-tests.sh`](bin/run-tests.sh) script.\r\n\r\nTo check the code coverage see the `docs/code-coverage.html` file.\r\n\r\n```bash\r\nbin/setup.sh\r\nbin/run-tests.sh\r\n```\r\n\r\n```\r\n _____ ___  ___ _____ ___  ___\r\n|_   _/ __)( __/_   _/ __)| _ )\r\n  |_| \\___ /___) |_| \\___ |_|_\\  v2.0.x\r\n\r\nPHP 5.6.20-1+deb.sury.org~trusty+1 (cgi-fcgi) | php-cgi -n -c .../tests/php.ini | 1 thread\r\n\r\n................\r\n\r\n\r\nOK (16 tests, 2.2 seconds)\r\n\r\n```\r\n\r\n\r\n## Example\r\n\r\nThis simple example demonstrates how to use the **ImageStore** library in the [**Nette**](https://doc.nette.org/cs/2.3/quickstart) application\r\nusing the [**Doctrine**](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html) library as ORM.\r\n\r\nIt assumes that the **Doctrine's EntityManager** is available trough the application DI container.\r\n\r\n### Configuration\r\n\r\nImage macros should be added to the [**Latte engine**](https://latte.nette.org/) as described\r\nin [documentation](https://doc.nette.org/en/2.2/configuring#toc-latte):\r\n\r\n```yaml\r\nnette:\r\n    latte:\r\n        macros:\r\n            - Rostenkowski\\ImageStore\\Macro\\ImageMacro::install\r\n```\r\n\r\n\r\n### Entity\r\n\r\n```php\r\n<?php\r\n\r\nnamespace MyApp\\Entities;\r\n\r\nuse Rostenkowski\\ImageStore\\Entity\\ImageEntity;\r\n\r\n/** @ORM\\Entity */\r\nclass MyImageEntity extends ImageEntity\r\n{\r\n\t/** @ORM\\Id */\r\n\tprivate $id;\r\n\r\n\tpublic function getId()\r\n\t{\r\n\t\treturn $this->id;\r\n\t}\r\n\r\n}\r\n```\r\n\r\n### Presenter\r\n\r\n```php\r\n<?php\r\n\r\nnamespace MyApp\\Presenters;\r\n\r\nuse Doctrine\\ORM\\EntityManager;\r\nuse Nette\\Application\\UI\\Presenter;\r\nuse Nette\\Application\\UI\\Form;\r\nuse Rostenkowski\\ImageStore\\ImageStorage;\r\n\r\nclass MyPresenter extends Presenter\r\n{\r\n\t/** @var ImageStorage */\r\n\tprivate $images;\r\n\r\n\t/** @inject @var EntityManager */\r\n    private $em;\r\n\r\n    /** @persistent @var integer */\r\n    private $avatar;\r\n\r\n\tprotected function startup()\r\n\t{\r\n\t\t$this->images = new ImageStorage(__DIR__ . '/images', __DIR__ . '/cache');\r\n\t\t$this->template->__imageStore = $this->images; // this is important for the image macros\r\n\t}\r\n\r\n\tpublic function createComponentProfile()\r\n\t{\r\n\t\t$form = new Form();\r\n\t\t$form->addUpload('avatar');\r\n\t\t$form->addSubmit('save', 'Save changes');\r\n\t\t$form->onSuccess[] = function($form, $values) {\r\n\t\t\t$image = new MyImageEntity();\r\n\t\t\t$this->images->upload($values->avatar, $image);\r\n\t\t\t$this->em->persist($image);\r\n\t\t\t$this->avatar = $image->getId();\r\n\t\t};\r\n\r\n\t\treturn $form;\r\n\t}\r\n\r\n\tpublic function renderDefault()\r\n\t{\r\n\t\t$this->template->avatar = $this->em->find(MyImageEntity::class, $this->avatar);\r\n\t}\r\n}\r\n```\r\n\r\n### Latte template\r\n\r\n```html\r\n<div>\r\n\t...\r\n\t<img n:crop=\"$avatar, '64x64'\">\r\n\t...\r\n</div>\r\n```\r\n\r\n[![Downloads this Month](https://img.shields.io/packagist/dm/rostenkowski/imagestore.svg)](https://packagist.org/packages/rostenkowski/imagestore)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}